<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/task
            http://www.springframework.org/schema/task/spring-task.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd"
>
<!--    配置组件扫描路径-->
    <context:component-scan base-package="com.imooc"/>
<!--    开启注解-->
    <mvc:annotation-driven>
<!--        配置转换器解决响应中的中文乱码问题-->
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="objectMapper">
                    <bean class="com.imooc.reader.config.CustomObjectMapper"/>
                </property>
            </bean>
            <!--        处理响应时的中文字符问题-->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=utf-8</value>
<!--                        <value>text/html;charset=utf-8</value>-->
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
<!--    排除静态资源-->
    <mvc:default-servlet-handler/>
    <!--MyBatis与Spring的整合配置-->
    <!--1.配置数据源-->
    <!--开启context命名空间-->
    <!--使用context空间加载properties文件-->
    <context:property-placeholder location="classpath*:*.properties" system-properties-mode="NEVER"/>
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!--使用属性占位符${}读取properties文件中的属性-->
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
<!--        设置初始连接池数量-->
        <property name="initialSize" value="5"/>
<!--        设置最大连接池数量-->
        <property name="maxActive" value="20"/>
    </bean>
    <!--2.配置SessionFactoryBean-->
<!--    sqlSessionFactoryBean用于根据配置信息创建SqlSessionFactory，不再需要我们自己创建-->
<!--    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
    <bean id="sessionFactory" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
<!--        保存sql文件的xml-->
        <property name="mapperLocations" value="classpath:mappers/*.xml"/>
<!--        mybatis框架依赖的配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
<!--        配置插件-->
<!--        Mybatis3.4以后版本需要在MybatisSqlSessionFactoryBean.plugins属性中进行配置-->
        <property name="plugins">
            <array>
<!--                实例化插件容器-->
                <bean class="com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor">
                    <property name="interceptors">
                        <list>
<!--                            配置分页插件-->
                            <bean class="com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor"/>
                        </list>
                    </property>
                </bean>
            </array>
        </property>
    </bean>
    <!--3.配置Mapper扫描器-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.imooc.reader.mapper"/>
    </bean>
    <!--4.配置mybatis-config.xml-->

<!--    定义事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>
<!--    验证码生成配置-->
<!--    实例化一个默认的kaptcha对象-->
    <bean id="kaptchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
<!--        设置配置属性-->
        <property name="config">
<!--            赋值一个config对象-->
            <bean class="com.google.code.kaptcha.util.Config">
<!--                通过构造参数来设置-->
                <constructor-arg>
                    <props>
<!--                        生成的图片是否包含边框-->
                        <prop key="kaptcha.border">no</prop>
<!--                        设置验证码图片宽度-->
                        <prop key="kaptcha.image.width">120</prop>
<!--                        设置验证码字体颜色为蓝色-->
                        <prop key="kaptcha.textproducer.font.color">blue</prop>
<!--                        设置字符大小-->
                        <prop key="kaptcha.textproducer.font.size">40</prop>
<!--                        设置验证码位数-->
                        <prop key="kaptcha.textproducer.char.length">4</prop>
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>
<!--    启用注解形式的定时任务功能-->
    <task:annotation-driven/>
<!--启用SpringMVC文件上传功能-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"/>
    </bean>
</beans>